local UIS = game:GetService("UserInputService")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CarGrabberGui"
screenGui.Parent = game.CoreGui

-- Create Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 250, 0, 350)
mainFrame.Position = UDim2.new(0, 10, 0, 10)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui

-- Create Close Button
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -40, 0, 10)
closeButton.Text = "X"
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextSize = 18
closeButton.BorderSizePixel = 0
closeButton.Parent = mainFrame

closeButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = false
end)

-- Create Title Label
local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Size = UDim2.new(1, -50, 0, 30)
titleLabel.Position = UDim2.new(0, 10, 0, 10)
titleLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
titleLabel.Text = "Car Grabber"
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 24
titleLabel.BorderSizePixel = 0
titleLabel.Parent = mainFrame

-- Create Scrolling Frame for buttons
local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Name = "ScrollingFrame"
scrollingFrame.Size = UDim2.new(1, -20, 1, -60)
scrollingFrame.Position = UDim2.new(0, 10, 0, 50)
scrollingFrame.CanvasSize = UDim2.new(1, 0, 0, 0)
scrollingFrame.ScrollBarThickness = 10
scrollingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.Parent = mainFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = scrollingFrame
UIListLayout.Padding = UDim.new(0, 5)

local buttonMap = {}  -- Map buttons to seats

local function addButton(nameToShow, vehicleSeat)
    local button = Instance.new("TextButton")
    button.Name = "GrabButton_" .. nameToShow
    button.Size = UDim2.new(1, -10, 0, 40)
    button.Text = "Grab " .. nameToShow
    button.TextColor3 = Color3.new(1, 1, 1)
    button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    button.Font = Enum.Font.SourceSans
    button.TextSize = 18
    button.BorderSizePixel = 0
    button.Parent = scrollingFrame

    button.MouseButton1Click:Connect(function()
        if vehicleSeat.Occupant then
            return
        end

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            local originalPosition = humanoidRootPart.CFrame
            humanoidRootPart.CFrame = vehicleSeat.CFrame + Vector3.new(0, 5, 0) -- Adjust the offset as needed
            wait(1)
            humanoidRootPart.CFrame = originalPosition
        end
    end)

    buttonMap[vehicleSeat] = button  -- Map the button to the seat
    scrollingFrame.CanvasSize = UDim2.new(1, 0, 0, UIListLayout.AbsoluteContentSize.Y)
end

local function updateButtons()
    local currentSeats = {}  -- Table to keep track of current VehicleSeats

    local function checkDescendants(parent)
        for _, v in pairs(parent:GetChildren()) do
            if v:IsA("VehicleSeat") then
                currentSeats[v] = true
                if not buttonMap[v] then
                    local nameToShow = v.Name
                    if v.Parent and v.Parent:IsA("Model") then
                        nameToShow = v.Parent.Name .. " (" .. v.Name .. ")"
                    end
                    addButton(nameToShow, v)
                end
            end
            checkDescendants(v)
        end
    end

    checkDescendants(game.Workspace)

    -- Remove buttons for seats that are no longer in the game
    for seat, button in pairs(buttonMap) do
        if not currentSeats[seat] then
            button:Destroy()
            buttonMap[seat] = nil
            scrollingFrame.CanvasSize = UDim2.new(1, 0, 0, UIListLayout.AbsoluteContentSize.Y)
        end
    end
end

local function periodicallyCheck()
    while true do
        updateButtons()
        wait(30)
    end
end

spawn(periodicallyCheck)

updateButtons()  -- Initial check
